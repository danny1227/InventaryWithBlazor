// <auto-generated />
using System;
using DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(InventaryContext))]
    [Migration("20250331030231_FirstMigration")]
    partial class FirstMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entities.CategoryEntity", b =>
                {
                    b.Property<string>("CategoryId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = "ASH",
                            CategoryName = "Aseo Hogar"
                        },
                        new
                        {
                            CategoryId = "ELC",
                            CategoryName = "Electrónicos"
                        },
                        new
                        {
                            CategoryId = "RPR",
                            CategoryName = "Reparaciones"
                        },
                        new
                        {
                            CategoryId = "CLT",
                            CategoryName = "Cultura"
                        },
                        new
                        {
                            CategoryId = "SPR",
                            CategoryName = "Deportes"
                        },
                        new
                        {
                            CategoryId = "FDN",
                            CategoryName = "Alimentación"
                        },
                        new
                        {
                            CategoryId = "HME",
                            CategoryName = "Hogar y Muebles"
                        });
                });

            modelBuilder.Entity("Entities.InputOutputEntity", b =>
                {
                    b.Property<string>("InOutId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("InOutDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsInput")
                        .HasColumnType("bit");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("StorageId")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("InOutId");

                    b.HasIndex("StorageId");

                    b.ToTable("InputOutputs");
                });

            modelBuilder.Entity("Entities.ProductEntity", b =>
                {
                    b.Property<string>("ProductId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CategoryId")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ProductDescription")
                        .IsRequired()
                        .HasMaxLength(600)
                        .HasColumnType("nvarchar(600)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("TotalQuantity")
                        .HasColumnType("int");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = "P1",
                            CategoryId = "ASH",
                            ProductDescription = "Lavadora de ropa",
                            ProductName = "Lavadora",
                            TotalQuantity = 10
                        },
                        new
                        {
                            ProductId = "P2",
                            CategoryId = "ELC",
                            ProductDescription = "Televisor de 50 pulgadas",
                            ProductName = "Televisor",
                            TotalQuantity = 10
                        },
                        new
                        {
                            ProductId = "P3",
                            CategoryId = "RPR",
                            ProductDescription = "Reparación de PC",
                            ProductName = "Reparación de PC",
                            TotalQuantity = 10
                        },
                        new
                        {
                            ProductId = "P4",
                            CategoryId = "CLT",
                            ProductDescription = "Libro de programación",
                            ProductName = "Libro",
                            TotalQuantity = 10
                        },
                        new
                        {
                            ProductId = "P5",
                            CategoryId = "SPR",
                            ProductDescription = "Balón de fútbol",
                            ProductName = "Balón de fútbol",
                            TotalQuantity = 10
                        },
                        new
                        {
                            ProductId = "P6",
                            CategoryId = "FDN",
                            ProductDescription = "Arroz",
                            ProductName = "Arroz",
                            TotalQuantity = 10
                        },
                        new
                        {
                            ProductId = "P7",
                            CategoryId = "HME",
                            ProductDescription = "Sofá de 3 puestos",
                            ProductName = "Sofá",
                            TotalQuantity = 10
                        },
                        new
                        {
                            ProductId = "P8",
                            CategoryId = "CLT",
                            ProductDescription = "Camisa de vestir",
                            ProductName = "Camisa",
                            TotalQuantity = 10
                        });
                });

            modelBuilder.Entity("Entities.StorageEntity", b =>
                {
                    b.Property<string>("StorageId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PartialQuantity")
                        .HasColumnType("int");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("WarehouseId")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("StorageId");

                    b.HasIndex("ProductId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("Storages");
                });

            modelBuilder.Entity("Entities.WarehouseEntity", b =>
                {
                    b.Property<string>("WarehouseId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("WarehouseName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("WherehouseAddress")
                        .IsRequired()
                        .HasMaxLength(600)
                        .HasColumnType("nvarchar(600)");

                    b.HasKey("WarehouseId");

                    b.ToTable("Warehouses");

                    b.HasData(
                        new
                        {
                            WarehouseId = "WH1",
                            WarehouseName = "Aseo Hogar",
                            WherehouseAddress = "zona 01"
                        },
                        new
                        {
                            WarehouseId = "WH2",
                            WarehouseName = "Electrónicos",
                            WherehouseAddress = "zona 01"
                        },
                        new
                        {
                            WarehouseId = "WH3",
                            WarehouseName = "Reparaciones",
                            WherehouseAddress = "zona 01"
                        },
                        new
                        {
                            WarehouseId = "WH4",
                            WarehouseName = "Cultura",
                            WherehouseAddress = "zona 01"
                        },
                        new
                        {
                            WarehouseId = "WH5",
                            WarehouseName = "Deportes",
                            WherehouseAddress = "zona 01"
                        },
                        new
                        {
                            WarehouseId = "WH6",
                            WarehouseName = "Alimentación",
                            WherehouseAddress = "zona 01"
                        },
                        new
                        {
                            WarehouseId = "WH7",
                            WarehouseName = "Hogar y Muebles",
                            WherehouseAddress = "zona 01"
                        },
                        new
                        {
                            WarehouseId = "WH8",
                            WarehouseName = "Ropa",
                            WherehouseAddress = "zona 01"
                        });
                });

            modelBuilder.Entity("Entities.InputOutputEntity", b =>
                {
                    b.HasOne("Entities.StorageEntity", "Storage")
                        .WithMany("InputOutputs")
                        .HasForeignKey("StorageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Storage");
                });

            modelBuilder.Entity("Entities.ProductEntity", b =>
                {
                    b.HasOne("Entities.CategoryEntity", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Entities.StorageEntity", b =>
                {
                    b.HasOne("Entities.ProductEntity", "Product")
                        .WithMany("Storage")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.WarehouseEntity", "Warehouse")
                        .WithMany("Storage")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("Entities.CategoryEntity", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Entities.ProductEntity", b =>
                {
                    b.Navigation("Storage");
                });

            modelBuilder.Entity("Entities.StorageEntity", b =>
                {
                    b.Navigation("InputOutputs");
                });

            modelBuilder.Entity("Entities.WarehouseEntity", b =>
                {
                    b.Navigation("Storage");
                });
#pragma warning restore 612, 618
        }
    }
}
